#
# COPYRIGHT Ericsson 2021
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#
modelVersion: 2.0
description: "Middlemen stubs"
# See image catalog: https://confluence.lmera.ericsson.se/display/ACD/ADP+CICD+Docker+Image+Catalog
docker-images:
  - adp-asciidoc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-asciidocbuilder:${env.ASCII_DOC_BUILDER_TAG}
  - adp-doc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-docbuilder:${env.DOC_BUILDER_TAG}
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/common-library-adp-helm-dr-check:${env.HELM_DR_CHECK_TAG}
  - adp-helm-kubectl: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-py3kubehelmbuilder:${env.HELM_KUBECTL_TAG}
  - adp-image-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-image-dr-check:${env.IMAGE_DR_CHECK_TAG}
  - adp-maven-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-java11mvnbuilder:${env.MVN_BUILDER_TAG}
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:${env.RELEASE_AUTO_TAG}
  - elib-make-utilities: ${elib-make-subpath}-oss-drop/eric-elib/elib_makeutilities:${env.ELIB_MAKE_UTILITIES_TAG}
  - bth-linter: armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-bth/eric-bth-spectral-linter:${env.BTH_LINTER_TAG}
  - sdk-validator: armdocker.rnd.ericsson.se/proj-eric-oss-sdkschema-drop/eric-oss-sdkschema-validator:latest
  - grype-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-image-scanning-grype:${env.ANCHORE_TAG}
  - trivy-inline-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/trivy-inline-scan:${env.TRIVY_TAG}
  - va-scan-kubesec: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubesec:${env.KUBESEC_TAG}
  - va-scan-kubeaudit: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubeaudit:${env.KUBEAUDIT_TAG}
  - va-scan-kubehunter: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubehunter:${env.KUBEHUNTER_TAG}
  - hadolint-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/hadolint-scan:${env.HADOLINT_TAG}
  - eric-oss-app-package-tool: armdocker.rnd.ericsson.se/proj-eric-oss-dev-test/releases/eric-oss-app-package-tool:latest
# List of constants
properties:
  - elib-make-subpath: armdocker.rnd.ericsson.se/proj-eric
  - image-registry-path: armdocker.rnd.ericsson.se/proj-eric-oss
  - image-secret: armdocker
  - project-subpath: proj-eric-oss
  - kw-docker-image-name: kafka-wrapper
  - kw-helm-chart-name : kafka-wrapper 
  - image-dev-repopath: ${image-registry-path}-dev
  - image-ci-repopath: ${image-registry-path}-ci-internal
  - image-drop-repopath: ${image-registry-path}-drop
  - kw-image-full-name: ${image-drop-repopath}/${kw-docker-image-name}
  - kw-image-ci-full-name: ${image-ci-repopath}/${kw-docker-image-name}
  # Helm Chart name must follow the pattern: eric-[a-z0-9]{1,5}-[a-z0-9-]{1,30}
  - helm-chart-repo-server-path: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss
  - helm-chart-dev-repopath: ${helm-chart-repo-server-path}-dev-helm
  - helm-chart-ci-repopath: ${helm-chart-repo-server-path}-ci-internal-helm
  - helm-chart-drop-repo: ${helm-chart-repo-server-path}-drop-helm
# Generic repository for publishing artifacts such as documentation
  - generic-drop-repo: ${helm-chart-repo-server-path}-drop-generic
  # Functional ID for your Team or CI group to push to Gerrit repo
  - git-user: ossadmin
  - git-repo-path: OSS/OSS/com.ericsson.oss.internaltools.test.stubs/dmm-stub
  - git-repo-url: ssh://${git-user}@gerrit-gamma.gic.ericsson.se:29418/${git-repo-path}
  - git-repo: https://gerrit-gamma.gic.ericsson.se/#/admin/projects/${git-repo-path}
  - enabled-helm-design-rules: "-DhelmDesignRule.config.drHc011=enable -DhelmDesignRule.config.DR-D1120-045-AD=enable -DhelmDesignRule.config.DR-D1123-124=disable"


# import environment variables (For example: Jenkins parameters)
env:
  - DOCKER_NETWORK (default=--network host)
  - HOME
  - PWD
  - RELEASE (default=false)
  - BUILD_DIR (default=./build)
  - KAAS_INFO_FILE (default=${env.BUILD_DIR}/kaas-info.log)
  - GERRIT_USERNAME
  - GERRIT_PASSWORD
  - GERRIT_CHANGE_NUMBER
  - GERRIT_CHANGE_URL
  - SELI_ARTIFACTORY_REPO_USER
  - SELI_ARTIFACTORY_REPO_PASS
  - SERO_ARTIFACTORY_REPO_USER
  - SERO_ARTIFACTORY_REPO_PASS
  - RELEASE_AUTO_TAG (default=latest)
  
# Variables, set by below tasks
var:
  - commithash
  - commithash-full
  - commit-author
  - commit-email
  - docker-config-basepath
  - image-registry
  - helm-chart-repo-internal
  - kw-image-full-name-internal
  - image-repopath-internal
  - image-repopath-drop
  - pom-version
  - kw-rest2html-optional
  - kw-revision
  - kw-rstate
  - version
  - kw-version
  - version-prefix
  - image-dr-vm-args
  - kaas-version
  - kaas-current-context
  - resultcode_hadolint_check
  - save-namespace
  - cbos-version-all
  - cbos-version
# Rules to execute
rules:
  # Clean workspace
  clean:
    - task: rm
      cmd:
        - rm -rf .bob/
  # Common tasks for all init rules
  init-common:
    - task: kw-version
      docker-image: adp-release-auto
      docker-flags:
        - "--env RELEASE"
        - "-v ${env.PWD}/kafka-wrapper:${env.PWD}/kafka-wrapper"
        - "--workdir ${env.PWD}/kafka-wrapper"
      cmd: generate-version --is-release ${env.RELEASE} --output version
    - task: kw-change-value
      cmd: cat kafka-wrapper/.bob/var.version > .bob/var.kw-version
    - task: kw-rstate
      docker-image: adp-release-auto
      cmd: get_rstate.py ${var.kw-version} > .bob/var.kw-rstate
    - task: commit
      docker-image: adp-release-auto
      cmd:
        - git rev-parse --short HEAD > .bob/var.commithash
        - git rev-parse HEAD > .bob/var.commithash-full
        - git log -1 --format='%aN' > .bob/var.commit-author
        - git log -1 --format='%aE' > .bob/var.commit-email
  # CI-Internal Tasks: used by CI to use as temporary storage for testing, only CI user has write access.
  init-precodereview:
    - rule: init-common
    - task: kw-preliminary-revision # For example: PA1
      cmd: RSTATE=${var.kw-rstate} && echo P${RSTATE:2}1 > .bob/var.kw-revision
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: kw-image-full-name-internal
      cmd: echo "${image-ci-repopath}/${kw-docker-image-name}" > .bob/var.kw-image-full-name-internal
  # Drop level tasks: used by CI to publish artifacts after successful CI pipeline execution for a drop build
  init-drop:
    - rule: init-common
    - task: kw-full-revision # For example: A (Note: The Letters I O P Q R W must never be used for Document Revisioning.
      cmd:
        - RSTATE=${var.kw-rstate} && echo ${RSTATE:2} > .bob/var.kw-revision
        - echo -cpi > .bob/var.kw-rest2html-optional
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-repopath-drop
      cmd: echo "${image-drop-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-drop
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: kw-image-full-name-internal
      cmd: echo "${image-ci-repopath}/${kw-docker-image-name}" > .bob/var.kw-image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: adp-artifacts-properties
      docker-image: adp-release-auto
      cmd: generate-adp-artifacts
        --chart-name ${kw-helm-chart-name}
        --chart-version ${var.kw-version}
        --chart-repo ${helm-chart-drop-repo}
        --image-name ${docker-image-name}
        --image-version ${var.kw-version}
        --image-repo "${var.image-registry}/${var.image-repopath-internal}"
    - task: write-git-details
      cmd:
        - echo "GIT_TAG=$(git log -1 --pretty=format:'%h')" >> artifact.properties
        - echo "GIT_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')" >> artifact.properties
        - echo "GIT_COMMIT_AUTHOR_EMAIL=$(git log -1 --format='%aE')" >> artifact.properties
        - echo "GIT_COMMIT_SUMMARY=$(git log -1 --pretty=format:'%s')" >> artifact.properties
        - echo "GERRIT_CHANGE_URL=${env.GERRIT_CHANGE_URL}" >> artifact.properties


      

  image:
    - task: kw-docker-build
      cmd: docker build ${env.PWD} ${env.DOCKER_NETWORK}
        --file kafka-wrapper/Dockerfile 
        --tag ${var.kw-image-full-name-internal}:${var.kw-version}
        --build-arg CBOS_VERSION=6.6.0-16
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg COMMIT=${var.commithash}
        --build-arg APP_VERSION=${var.kw-version}
        --build-arg RSTATE=${var.kw-rstate}
    - task: kw-image-push-internal
      cmd: docker push ${var.kw-image-full-name-internal}:${var.kw-version}


  package-local:
    - task: kw-package-helm-internal
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder kafka-wrapper/${kw-helm-chart-name}
        --workdir .bob --output .bob/${kw-helm-chart-name}-internal
        --version ${var.kw-version}
        --replace eric-product-info.yaml:VERSION=${var.kw-version}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repopath-internal}
        --replace eric-product-info.yaml:IMAGE_NAME=${kw-docker-image-name}
        --replace REPO_URL=${var.image-registry}
        --replace RSTATE=${var.kw-rstate}

  package:
    - rule: package-local
    - task: kw-helm-upload-internal
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: upload_file.sh
        --filename=.bob/${kw-helm-chart-name}-internal/${kw-helm-chart-name}-${var.kw-version}.tgz
        --repository=${helm-chart-dev-repopath}/${kw-helm-chart-name}
        --api-token=${env.SELI_ARTIFACTORY_REPO_PASS}


  publish:
    - task: kw-package-helm-public
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder kafka-wrapper/${kw-helm-chart-name}
        --workdir .bob --output build
        --version ${var.kw-version}
        --replace eric-product-info.yaml:VERSION=${var.kw-version}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repopath-drop}
        --replace RSTATE=${var.kw-rstate}
        --replace eric-product-info.yaml:IMAGE_NAME=${kw-docker-image-name}


    - task: kw-image-pull-internal
      cmd: docker pull ${var.kw-image-full-name-internal}:${var.kw-version}
    - task: kw-image-tag-public
      cmd: docker tag ${var.kw-image-full-name-internal}:${var.kw-version} ${kw-image-full-name}:${var.kw-version}
    - task: kw-image-push-public
      cmd: docker push ${kw-image-full-name}:${var.kw-version}


    - task: git-tag
      cmd:
        - git tag -af ${var.kw-version} -m "Release ${var.kw-version}"
        - git remote set-url origin ${git-repo-url}
        - git push origin ${var.kw-version} || true
    - task: kw-helm-upload
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: upload_file.sh
        --filename=build/${kw-helm-chart-name}-${var.kw-version}.tgz
        --repository=${helm-chart-drop-repo}/${kw-helm-chart-name}
        --api-token=${env.SELI_ARTIFACTORY_REPO_PASS}
